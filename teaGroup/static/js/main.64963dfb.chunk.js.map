{"version":3,"sources":["serviceWorker.js","reducers/menuReducer.js","reducers/index.js","actions/types.js","store.js","components/DrinkMenu.js","actions/menuActions.js","components/StoreList.js","router.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","menu","combineReducers","menuStates","state","action","type","payload","stores","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","DrinkMenu","props","values","queryString","parse","this","search","fetchMenu","nextProps","console","log","JSON","stringify","Items","map","unit","className","key","name","price","href","title","Component","connect","dispatch","fetch","then","res","json","allMenu","data","_id","StoreList","fetchStore","to","length","routes","allStores","ReactDOM","render","StrictMode","renderRoutes","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64963dfb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_MENU, FETCH_STORE } from '../actions/types'\n\nconst initialState = {\n    menu: []\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type){\n        case FETCH_MENU:\n            return {\n              ...state,\n              menu: action.payload\n            };\n            \n        case FETCH_STORE:\n            return {\n                ...state,\n                stores: action.payload\n            };            \n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\nimport postReducer from './postReducer';\nimport menuReducer from './menuReducer';\n\n\nexport default combineReducers(\n    {\n        menuStates: menuReducer\n    }\n);","export const FETCH_POST = 'FETCH_POST';\nexport const NEW_POST = 'NEW_POST';\nexport const FETCH_MENU = 'FETCH_MENU';\nexport const FETCH_STORE = 'FETCH_STORE';","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {};\nconst middleWare = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleWare),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/main.css';\nimport {fetchMenu} from '../actions/menuActions';\nimport queryString from 'query-string'\n\nclass DrinkMenu extends Component {\n\n    componentWillMount(){\n        const values = queryString.parse(this.props.location.search)\n        this.props.fetchMenu(values.store);\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.props = nextProps;\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            menu:[]\n        };\n    }\n    \n    render() {\n        console.log('render menu');\n        console.log(JSON.stringify(this.props));\n        const arr = (this.props.menu.menu? this.props.menu.menu:[]);\n\n        const Items = arr.map( unit => (\n            <div className=\"pdBox\" key={unit.name}>\n                <div className=\"pdBox_info\">\n                    <p>{unit.name}</p>\n                    <p>{unit.price}</p>\n                </div>\n                <div className=\"pdBox_img\">\n                    <a href=\"teaPdcnt.html\"><i className=\"fa fa-plus\"></i></a>\n                </div>\n            </div>\n        ));\n\n\n        return (\n            <div>\n                <h3 className=\"pd_category\">{this.props.menu.title}</h3>\n                <div className=\"pdlist\">\n                    {Items}\n                </div>               \n            </div>\n        )\n    }\n}\n\nclass DrinkItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state.name = '';\n        this.state.price = 0;\n        this.state.size = '';\n    }\n\n    render() {\n        return (\n            <div className=\"pdBox\">\n                <div className=\"pdBox_info\">\n                    <p>{this.props.title}</p>\n                    <p>{this.props.price}</p>\n                </div>\n                <div class=\"pdBox_img\">\n                    <a href=\"teaPdcnt.html\"><i className=\"fa fa-plus\"></i></a>\n                </div>\n            </div>                \n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    console.log('mapStateToProps');\n    return (\n        { \n            menu: state.menuStates.menu\n        }\n    );    \n\n}\n\n\nexport default connect(mapStateToProps, { fetchMenu })(DrinkMenu)\n","import {FETCH_MENU, FETCH_STORE} from './types';\n\n\nconst fetchMenu = (store) => (dispatch) => {\n    fetch('https://botadmin.luxurai.com/stores?$limit=100&$skip=0&$sort[_id]=1')\n    .then( res => res.json())\n    .then( allMenu => {\n        let menu = {};\n        for (let unit of allMenu.data){\n            console.log('unit');\n            console.log(JSON.stringify(unit))\n            if (unit._id===store){\n                menu = unit\n                break;\n            }\n        }\n        console.log('dispatch:'+JSON.stringify(menu));\n        dispatch(\n            {\n                type: FETCH_MENU,\n                payload: menu\n            }\n        )\n    });\n};\n\nconst fetchStore = () => (dispatch) => {\n    fetch('https://botadmin.luxurai.com/stores?$limit=100&$skip=0&$sort[_id]=1')\n    .then( res => res.json())\n    .then( allStores => {\n        dispatch(\n            {\n                type: FETCH_STORE,\n                payload: allStores.data\n            }\n        )\n    });\n};\n\nexport {fetchMenu, fetchStore}\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport '../styles/main.css';\nimport {fetchStore} from '../actions/menuActions';\n\nclass StoreList extends Component {\n\n    componentWillMount(){\n        this.props.fetchStore();\n    }\n\n    componentWillReceiveProps(nextProps){\n\n        this.props = nextProps;\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            stores:[]\n        };\n    }\n    \n    render() {\n        const arr = (this.props.stores? this.props.stores:[]);\n        const Items = arr.map( unit => (\n            <div className=\"pdBox\" key={unit._id}>\n                <div className=\"pdBox_info\">\n                    <Link to={'/drinkMenu?store='+unit._id}>{unit.title + '\\t' + unit.menu.length}</Link>\n                </div>\n            </div>\n        ));\n\n\n        return (\n            <div>\n                <h3 className=\"pd_category\">想喝哪一家？</h3>\n                <div className=\"pdlist\">\n                    {Items}\n                </div>               \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => { \n    return (\n        { \n            stores: state.menuStates.stores\n        }\n    );\n}\n\n\nexport default connect(mapStateToProps, { fetchStore })(StoreList)\n","import  DrinkMenu  from './components/DrinkMenu'\nimport  StoreList  from './components/StoreList'\n\n\n\nconst routes = [\n    {\n        'path': '/',\n        'exact': true,\n        'component': StoreList\n    },\n    {\n        'path': '/drinkMenu',\n        'exact': true,\n        'component': DrinkMenu\n    }\n];\n\nexport default routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store.js'\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { renderRoutes } from 'react-router-config';\nimport routes from './router.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        {renderRoutes(routes)}\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}